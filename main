"""
File: asteroids.py
Original Author: Br. Burton
Designed to be completed by others
This program implements the asteroids game.

our teacher gave us this file and we would call certain parts of it for our other files.

we ended up going over this file and learned how it was all made, but we were just learing python when
we started this project so after we finished it we were all able to understand this part.
"""
import arcade
import random
from rocks import BigRock
from ship import Ship
from ship import Bullets

# These are Global constants to use throughout the game
SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600

BULLET_RADIUS = 30
BULLET_SPEED = 10
BULLET_LIFE = 60

SHIP_TURN_AMOUNT = 5
SHIP_THRUST_AMOUNT = 0.25
SHIP_RADIUS = 30

INITIAL_ROCK_COUNT = 5

BIG_ROCK_SPIN = 1
BIG_ROCK_SPEED = 1.5
BIG_ROCK_RADIUS = 15

MEDIUM_ROCK_SPIN = -2
MEDIUM_ROCK_RADIUS = 5

SMALL_ROCK_SPIN = 5
SMALL_ROCK_RADIUS = 2




class Game(arcade.Window):
    """
    This class handles all the game callbacks and interaction
    This class will then call the appropriate functions of
    each of the above classes.
    You are welcome to modify anything in this class.
    """

    def __init__(self, width, height):
        """
        Sets up the initial conditions of the game
        :param width: Screen width
        :param height: Screen height
        """
        super().__init__(width, height)

        self.img = "images/alien_new_earth.png"

        self.score = 0

        self.held_keys = set()
        self.ship = Ship()

        # TODO: declare anything here you need the game class to track
        self.bullets = []
        self.rocks = []

#this controls how many rocks are drawn
        x=0
        # add initial elements
        while x < INITIAL_ROCK_COUNT:
            x += 1
            bigrock = BigRock()
            # pick random location
            bigrock.center.x = random.uniform(0, SCREEN_WIDTH)
            bigrock.center.y = random.uniform(0, SCREEN_HEIGHT)
            self.rocks.append(bigrock)

    def on_draw(self):
        """
        Called automatically by the arcade framework.
        Handles the responsibility of drawing all elements.
        """

        # clear the screen to begin drawing
        arcade.start_render()
        arcade.draw_texture_rectangle(SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2, SCREEN_WIDTH, SCREEN_HEIGHT,
                                      arcade.load_texture(self.img), angle=0, alpha=1)
        if self.ship.alive:
            self.ship.draw()

        # TODO: draw each object
        for rock in self.rocks:
            rock.draw()

        for bullet in self.bullets:
            bullet.draw()

        self.draw_score()

#if the ship has died the background will change
        if not self.ship.alive:
            self.img = "images/alien_background.png"
            self.draw_died()

        #this will draw text when all rocks are gone
        if self.score == (625*INITIAL_ROCK_COUNT):
            self.you_win()


    def draw_score(self):
        """
        Puts the current score on the screen
        """
        score_text = "Score: {}".format(self.score)
        start_x = 10
        start_y = SCREEN_HEIGHT - 20
        arcade.draw_text(score_text, start_x=start_x, start_y=start_y, font_size=12, color=arcade.color.WHITE)
        arcade.draw_text("SAVE THE EARTH", SCREEN_WIDTH/2-50, start_y, font_size=12, color=arcade.color.WHITE)

    def update(self, delta_time):
        """
        Update each object in the game.
        :param delta_time: tells us how much time has actually elapsed
        """
        self.check_keys()
        self.check_off_screen()


        # TODO: Tell everything to advance or move forward one step in time
        for rock in self.rocks:
            rock.advance()

        for bullet in self.bullets:
            bullet.advance()

        self.ship.advance()
        # TODO: Check for collisions
        self.check_collisions()

    def check_keys(self):
        """
        This function checks for keys that are being held down.
        You will need to put your own method calls in here.
        """
        if arcade.key.LEFT in self.held_keys:
            self.ship.spin(SHIP_TURN_AMOUNT)

        if arcade.key.RIGHT in self.held_keys:
            self.ship.spin(-SHIP_TURN_AMOUNT)

        if arcade.key.UP in self.held_keys:
            self.ship.move(SHIP_THRUST_AMOUNT)

        if arcade.key.DOWN in self.held_keys:
            self.ship.move(-SHIP_THRUST_AMOUNT)

            #this funtion can be implmented to stop the ship quicker
            #self.ship.stop()

            # Machine gun mode...
            # if arcade.key.SPACE in self.held_keys:
            #    pass

    def on_key_press(self, key: int, modifiers: int):
        """
        Puts the current key in the set of keys that are being held.
        You will need to add things here to handle firing the bullet.
        """
        bullet = Bullets()

        if self.ship.alive:
            self.held_keys.add(key)

            if key == arcade.key.SPACE:
                # TODO: Fire the bullet here!
                bullet.fire(self.ship.angle,self.ship.center.x,self.ship.center.y)
                self.bullets.append(bullet)

    def on_key_release(self, key: int, modifiers: int):
        """
        Removes the current key from the set of held keys.
        """
        if key in self.held_keys:
            self.held_keys.remove(key)

#this will loop the images on the screen
    def check_off_screen(self):
        """
        Checks to see if bullets or targets have left the screen
        and if so, removes them from their lists.
        :return:
        """
        for rock in self.rocks:
            rock.is_off_screen(SCREEN_WIDTH, SCREEN_HEIGHT)

        self.ship.is_off_screen(SCREEN_WIDTH, SCREEN_HEIGHT)

        for bullet in self.bullets:
            bullet.is_off_screen(SCREEN_WIDTH, SCREEN_HEIGHT)

#this will kill the bullet and explode the asteriods if they are hit
#or it will destroy the ship and explode the asteriod if they collide
    def check_collisions(self):
        """
        Checks to see if bullets have hit targets.
        Updates scores and removes dead items.
        :return:
        """

        # NOTE: This assumes you named your targets list "targets"

        for bullet in self.bullets:
            for rock in self.rocks:

                # Make sure they are both alive before checking for a collision
                if bullet.alive and rock.alive:
                    too_close = bullet.radius + rock.radius

                    if (abs(bullet.center.x - rock.center.x) < too_close and
                                abs(bullet.center.y - rock.center.y) < too_close):
                        # its a hit!
                        bullet.alive = False
                        self.score += rock.break_apart(self.rocks)

        for rock in self.rocks:
            # Make sure they are both alive before checking for a collision
            if self.ship.alive and rock.alive:
                too_close = self.ship.radius + rock.radius

                if (abs(self.ship.center.x - rock.center.x) < too_close and
                                abs(self.ship.center.y - rock.center.y) < too_close):
                        # its a hit!
                    self.ship.alive = False
                    rock.break_apart(self.rocks)
                    self.score += self.ship.hit()


                        # We will wait to remove the dead objects until after we
                        # finish going through the list

        # Now, check for anything that is dead, and remove it
        self.cleanup_zombies()

#this removes bullets and asteriods from the list
    def cleanup_zombies(self):
        """
        Removes any dead bullets or rocks from the list.
        :return:
        """
        for bullet in self.bullets:
            if not bullet.alive:
                self.bullets.remove(bullet)

        for rock in self.rocks:
            if not rock.alive:
                self.rocks.remove(rock)



#draws text on screen when the ship dies
    def draw_died(self):
        text = "EARTH HAS BEEN INVADED"
        font_size = 50
        start_x = 25
        start_y = SCREEN_HEIGHT - (font_size+5)
        arcade.draw_text(text,start_x,start_y,arcade.color.BLACK,font_size)
        arcade.draw_text("YOU LOSE! YOUR SCORE:{}".format(self.score),start_x, start_y/5,arcade.color.RED,font_size/1.25)

#text draw when all rocks are gone
    def you_win(self):
        font_size = 50
        start_x = 25
        start_y = SCREEN_HEIGHT - (font_size + 5)
        arcade.draw_text("YOU WIN! YOUR SCORE:{}".format(self.score), start_x, start_y / 5, arcade.color.WHITE,
                         font_size / 1.25)

# Creates the game and starts it going
window = Game(SCREEN_WIDTH, SCREEN_HEIGHT)
arcade.run()
