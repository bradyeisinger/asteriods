from flyingobject import FlyingObject
import random
import arcade
from abc import abstractmethod
from velocity import Velocity

INITIAL_ROCK_COUNT = 5

BIG_ROCK_SPIN = 1
BIG_ROCK_SPEED = 1.5
BIG_ROCK_RADIUS = 15

MEDIUM_ROCK_SPIN = -2
MEDIUM_ROCK_RADIUS = 5

SMALL_ROCK_SPIN = 5
SMALL_ROCK_RADIUS = 2



#base rock class for spinning all rocks
#all have some sort of break_apart which is why it is abstract

class Rock(FlyingObject):
    def __init__(self):
        super().__init__()
        self.angle = random.uniform(0, 359)
        self.radius = 0
        self.spin = 0

    def advance(self):
        super().advance()
        # spin the rock. don't copy and paste the advance from above
        self.angle += self.spin

    @abstractmethod
    def break_apart(self):
        pass

#the big rocks start in random locations
#break into 2 mediuma and 1 small rock
#return score of 20 if hit

class BigRock(Rock):
    def __init__(self):
        super().__init__()
        self.velocity.dx = random.uniform(-BIG_ROCK_SPEED,BIG_ROCK_SPEED)
        self.velocity.dy = random.uniform(-BIG_ROCK_SPEED,BIG_ROCK_SPEED)
        self.radius = BIG_ROCK_RADIUS
        # random.uniform can be decimal, int is only whole numbers.
        self.spin = random.uniform(-BIG_ROCK_SPIN,BIG_ROCK_SPIN)

    def draw(self):
        img = "images/flying_saucer_by_absurdwordpreferred.png"
        texture = arcade.load_texture(img)

        width = texture.width
        height = texture.height
        alpha = 1

        x = self.center.x
        y = self.center.y
        angle = self.angle

        arcade.draw_texture_rectangle(x, y, 150, 150, texture, angle, alpha)

#this is just getting the center of the big rock and putting the new rocks in that place
#with a new velocity and appending to the list
    def break_apart(self, rocks):
        rock1 = MediumRock()
        rock1.center.x = self.center.x
        rock1.center.y = self.center.y
        rock1.velocity.dx = self.velocity.dx
        rock1.velocity.dy = self.velocity.dy + (BIG_ROCK_SPEED*2)
        rocks.append(rock1)

        rock2 = MediumRock()
        rock2.center.x = self.center.x
        rock2.center.y = self.center.y
        rock2.velocity.dx = self.velocity.dx
        rock2.velocity.dy = self.velocity.dy + (-BIG_ROCK_SPEED * 2)
        rocks.append(rock2)

        rock3 = SmallRock()
        rock3.center.x = self.center.x
        rock3.center.y = self.center.y
        rock3.velocity.dx = self.velocity.dx + (BIG_ROCK_SPEED * 3)
        rock3.velocity.dy = self.velocity.dy
        rocks.append(rock3)

        self.alive = False

        return 25

#medium rocks appear in the location of the big rocdk when hit, with a differentr velocity
#breaks into 2 small rocks
#returns score of 50

class MediumRock(Rock):
    def __init__(self):
        super().__init__()
        self.radius = MEDIUM_ROCK_RADIUS
        self.spin = random.uniform(-MEDIUM_ROCK_SPIN, MEDIUM_ROCK_SPIN)

    def draw(self):
        img = "images/alien-flying-ufo.png"
        texture = arcade.load_texture(img)

        width = texture.width
        height = texture.height
        alpha = 1

        x = self.center.x
        y = self.center.y
        angle = self.angle

        arcade.draw_texture_rectangle(x, y, 100, 50, texture, angle, alpha)

# this is just getting the center of the medium and putting the new rocks in that place
# with a new velocity and appending to the list
    def break_apart(self,rocks):
        rock4 = SmallRock()
        rock4.center.x = self.center.x
        rock4.center.y = self.center.y
        rock4.velocity.dx = self.velocity.dx + (BIG_ROCK_SPEED * 3)
        rock4.velocity.dy = self.velocity.dy
        rocks.append(rock4)

        rock5 = SmallRock()
        rock5.center.x = self.center.x
        rock5.center.y = self.center.y
        rock5.velocity.dx = self.velocity.dx + (-BIG_ROCK_SPEED * 3)
        rock5.velocity.dy = self.velocity.dy
        rocks.append(rock5)

        self.alive = False
        return 50

#small rocks will disappear if hit and return score of 100
class SmallRock(Rock):
    def __init__(self):
        super().__init__()
        self.velocity.dx = random.uniform(-BIG_ROCK_SPEED, BIG_ROCK_SPEED)
        self.velocity.dy = random.uniform(-BIG_ROCK_SPEED, BIG_ROCK_SPEED)
        self.spin = random.uniform(-SMALL_ROCK_SPIN, SMALL_ROCK_SPIN)

    def draw(self):
        img = "images/saucer-clipart-cute-alien-spaceship-11.png"
        texture = arcade.load_texture(img)

        width = texture.width
        height = texture.height
        alpha = 1

        x = self.center.x
        y = self.center.y
        angle = self.angle

        arcade.draw_texture_rectangle(x, y, 75, 75, texture, angle, alpha)

#this will remove the small rocks completely when hit
    def break_apart(self,rocks):
        self.alive = False
        return 100
